# Default values for deployments.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: # image repository in here
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: LoadBalancer
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

config:
  server:
    type: tcp
    port: ":8080"
    stan:
      cluster_id: "nats-streaming"
      client_id: ""
  telemetry:
    trace:
      enabled: true
      ratio: 0.1
      agent:
        host: "127.0.0.1"
        port: 6831
    metric:
      address: ":8080"
      enabled: true

jaeger:
  container_name: "jaeger"
  depends_on:
    - app
  image: jaegertracing/all-in-one:latest
  ports:
    - target: 6831
      published: 6831
      protocol: udp
    - target: 16686
      published: 16686
      protocol: tcp
    - target: 14268
      published: 14268
      protocol: tcp
  networks:
    - main

  app:
    container_name: "stan-ge-server"
    build:
      dockerfile: Dockerfile
    depends_on:
      - nats-streaming-1
      - nats-streaming-2
      - nats-streaming-3
    networks:
      - main

  nats-streaming-1:
    command:
      - "--cluster"
      - "nats://0.0.0.0:6222"
      - "--cluster_id"
      - nats-streaming
      - "--clustered"
      - "--cluster_bootstrap"
      - "--cluster_log_path"
      - /data/log
      - "--cluster_node_id"
      - nats-streaming-1
      - "--cluster_raft_logging"
      - "--debug"
      - "--dir"
      - /data/msg
      - "--http_port"
      - "8222"
      - "--port"
      - "4222"
      - "--store"
      - file
      - "--stan_debug"
      - "--hb_interval"
      - 2s
      - "--hb_fail_count"
      - "1"
      - "--hb_timeout"
      - 5s
    image: "nats-streaming:0.17.0"
    networks:
      - main
    ports:
      - "14222:4222"
      - "18222:8222"
    volumes:
      - "./nats-streaming-1:/data"
  nats-streaming-2:
    command:
      - "--cluster"
      - "nats://0.0.0.0:6222"
      - "--cluster_id"
      - nats-streaming
      - "--clustered"
      - "--cluster_log_path"
      - /data/log
      - "--cluster_node_id"
      - nats-streaming-2
      - "--cluster_raft_logging"
      - "--debug"
      - "--dir"
      - /data/msg
      - "--http_port"
      - "8222"
      - "--port"
      - "4222"
      - "--store"
      - file
      - "--stan_debug"
      - "--routes"
      - "nats://nats-streaming-1:5222"
      - "--hb_interval"
      - 2s
      - "--hb_fail_count"
      - "1"
      - "--hb_timeout"
      - 5s
    image: "nats-streaming:0.17.0"
    networks:
      - main
    ports:
      - "24222:4222"
      - "28222:8222"
    volumes:
      - "./nats-streaming-2:/data"
  nats-streaming-3:
    command:
      - "--cluster"
      - "nats://0.0.0.0:6222"
      - "--cluster_id"
      - nats-streaming
      - "--clustered"
      - "--cluster_log_path"
      - /data/log
      - "--cluster_node_id"
      - nats-streaming-3
      - "--cluster_raft_logging"
      - "--debug"
      - "--dir"
      - /data/msg
      - "--http_port"
      - "8222"
      - "--port"
      - "4222"
      - "--store"
      - file
      - "--stan_debug"
      - "--routes"
      - "nats://nats-streaming-1:6222"
      - "--hb_interval"
      - 2s
      - "--hb_fail_count"
      - "1"
      - "--hb_timeout"
      - 5s
    image: "nats-streaming:0.17.0"
    networks:
      - main
    ports:
      - "34222:4222"
      - "38222:8222"
    volumes:
      - "./nats-streaming-3:/data"

networks:
  main:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.255.0/24
      driver: default